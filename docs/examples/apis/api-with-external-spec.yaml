# API with External Specification Example
# This example demonstrates loading API specifications and metadata from external files
# using YAML tags - a powerful feature for managing large specs and promoting reusability

# Method 1: Load API metadata and spec from external files using YAML tags
apis:
  - ref: products-api
    # Extract API name from the external spec file
    name: !file ./specs/products-api.yaml#info.title
    # Extract description from the external spec
    description: !file ./specs/products-api.yaml#info.description
    # Extract version using alternative syntax
    version: !file
      path: ./specs/products-api.yaml
      extract: info.version
    labels:
      team: catalog
      domain: e-commerce
      # Extract contact email from spec
      contact_email: !file ./specs/products-api.yaml#info.contact.email
    
    # Create an API version with the external spec
    versions:
      - ref: products-api-v2
        name: !file ./specs/products-api.yaml#info.version
        gateway_service:
          control_plane_id: "550e8400-e29b-41d4-a716-446655440000"
          id: "550e8400-e29b-41d4-a716-446655440001"
        # Load the entire OpenAPI specification from external file
        spec: !file ./specs/products-api.yaml

  # Method 2: Load users API similarly
  - ref: users-api
    name: !file ./specs/users-api.yaml#info.title
    description: !file ./specs/users-api.yaml#info.description  
    version: !file ./specs/users-api.yaml#info.version
    labels:
      team: platform
      domain: authentication
      contact_email: !file ./specs/users-api.yaml#info.contact.email
      license: !file ./specs/users-api.yaml#info.license.name
    
    versions:
      - ref: users-api-v3
        name: !file ./specs/users-api.yaml#info.version
        gateway_service:
          control_plane_id: "550e8400-e29b-41d4-a716-446655440000"
          id: "550e8400-e29b-41d4-a716-446655440002"
        spec: !file ./specs/users-api.yaml

# Define a developer portal for both APIs
portals:
  - ref: developer-portal
    name: "developer-portal"
    display_name: "Developer Documentation Portal"
    description: "Comprehensive API documentation for external developers"
    authentication_enabled: true
    rbac_enabled: false
    auto_approve_developers: true
    auto_approve_applications: false
    labels:
      purpose: external
      environment: production

# Publish both APIs to the portal
api_publications:
  - ref: products-api-publication
    api: products-api
    portal_id: developer-portal
    visibility: public
    auto_approve_registrations: true

  - ref: users-api-publication
    api: users-api
    portal_id: developer-portal
    visibility: public
    auto_approve_registrations: false  # Requires approval for user management API

# Example showing alternative file organization
# You could also organize specs in subdirectories:
# 
# apis:
#   - ref: mobile-api
#     name: !file ./mobile/specs/mobile-api.yaml#info.title
#     description: !file ./mobile/specs/mobile-api.yaml#info.description
#     spec: !file ./mobile/specs/mobile-api.yaml
#
# This allows teams to manage their own spec files while maintaining 
# centralized configuration for deployment and portal publishing.