# API with Multiple Versions Example
# This example shows how to define an API with multiple versions using child resources
# Demonstrates both nested and separate file configuration patterns

# Method 1: API with nested child resources
apis:
  - ref: payment-api
    name: "Payment Processing API"
    description: "Secure payment processing service"
    version: "2.0.0"  # Latest API version
    labels:
      team: payments
      compliance: pci-dss
      environment: production
    kongctl:
      protected: true  # Prevent accidental deletion

    # Nested API versions (child resources)
    versions:
      - ref: payment-api-v1
        name: "v1.0.0"
        gateway_service:
          # External control plane and service IDs
          control_plane_id: "550e8400-e29b-41d4-a716-446655440000"
          id: "550e8400-e29b-41d4-a716-446655440001"
        spec:
          openapi: "3.0.0"
          info:
            title: "Payment API v1"
            version: "1.0.0"
            description: "Legacy payment processing API"
          paths:
            /payments:
              post:
                summary: "Process payment"
                operationId: "processPayment"
                responses:
                  '200':
                    description: "Payment processed"

      - ref: payment-api-v2
        name: "v2.0.0"
        gateway_service:
          control_plane_id: "550e8400-e29b-41d4-a716-446655440000"
          id: "550e8400-e29b-41d4-a716-446655440002"
        spec:
          openapi: "3.0.0"
          info:
            title: "Payment API v2"
            version: "2.0.0"
            description: "Modern payment processing API with enhanced features"
          paths:
            /payments:
              post:
                summary: "Process payment with advanced options"
                operationId: "processPaymentAdvanced"
                responses:
                  '200':
                    description: "Payment processed successfully"
            /payments/batch:
              post:
                summary: "Process multiple payments"
                operationId: "processPaymentBatch"
                responses:
                  '200':
                    description: "Batch payments processed"

# Method 2: Separate API version declarations (useful for team ownership)
api_versions:
  - ref: payment-api-v3
    api: payment-api  # Reference to parent API
    name: "v3.0.0"
    gateway_service:
      control_plane_id: "550e8400-e29b-41d4-a716-446655440000"
      id: "550e8400-e29b-41d4-a716-446655440003"
    spec:
      openapi: "3.0.0"
      info:
        title: "Payment API v3"
        version: "3.0.0"
        description: "Next-generation payment API with microservices architecture"
      paths:
        /payments:
          post:
            summary: "Process payment with full feature set"
            operationId: "processPaymentFull"
        /payments/subscriptions:
          post:
            summary: "Create subscription payment"
            operationId: "createSubscriptionPayment"

# Define a portal for API documentation
portals:
  - ref: payments-portal
    name: "payments-portal"
    display_name: "Payment Services Portal"
    description: "Developer portal for payment APIs"
    authentication_enabled: true

# Publish API versions to the portal
api_publications:
  - ref: payment-v2-publication
    api: payment-api
    portal_id: payments-portal
    visibility: public
    auto_approve_registrations: true

  - ref: payment-v3-publication
    api: payment-api
    portal_id: payments-portal
    visibility: private  # Beta version
    auto_approve_registrations: false