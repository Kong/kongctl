# API Configuration with YAML Tags - Complete Implementation
# This example demonstrates all YAML tag functionality implemented in Stage 4
# Shows file loading, value extraction, and different tag syntax options

apis:
  # Example 1: Map format for value extraction
  - ref: users-api
    # Extract the title from the OpenAPI spec using map format
    name: !file
      path: ./specs/users-api.yaml
      extract: info.title
    # Extract the description
    description: !file
      path: ./specs/users-api.yaml
      extract: info.description
    # Extract nested contact information
    labels:
      team: platform
      api_type: rest
      contact_email: !file
        path: ./specs/users-api.yaml
        extract: info.contact.email
      contact_name: !file
        path: ./specs/users-api.yaml
        extract: info.contact.name
      license: !file
        path: ./specs/users-api.yaml
        extract: info.license.name
    kongctl:
      protected: true

    # Create API version with loaded spec
    versions:
      - ref: users-api-v3
        name: !file
          path: ./specs/users-api.yaml
          extract: info.version
        gateway_service:
          control_plane_id: "550e8400-e29b-41d4-a716-446655440000"
          id: "550e8400-e29b-41d4-a716-446655440001"
        # Load the entire OpenAPI specification
        spec: !file ./specs/users-api.yaml

  # Example 2: Hash (#) syntax for compact extraction
  - ref: products-api
    name: !file ./specs/products-api.yaml#info.title
    description: !file ./specs/products-api.yaml#info.description
    version: !file ./specs/products-api.yaml#info.version
    labels:
      team: e_commerce
      api_type: rest
      contact_email: !file ./specs/products-api.yaml#info.contact.email

    versions:
      - ref: products-api-v2
        name: !file ./specs/products-api.yaml#info.version
        gateway_service:
          control_plane_id: "550e8400-e29b-41d4-a716-446655440000"
          id: "550e8400-e29b-41d4-a716-446655440002"
        spec: !file ./specs/products-api.yaml

  # Example 3: Mixed file loading approaches in comprehensive setup
  - ref: comprehensive-api
    name: "Comprehensive File Loading API"
    # Load description from plain text file (no extraction needed)
    description: !file ./descriptions/comprehensive-api.txt
    version: "1.0.0"
    labels:
      team: platform
      # Mix of extraction methods
      users_version: !file ./specs/users-api.yaml#info.version
      products_version: !file
        path: ./specs/products-api.yaml
        extract: info.version
    
    versions:
      - ref: comprehensive-api-v1
        name: "v1.0.0"
        gateway_service:
          control_plane_id: "550e8400-e29b-41d4-a716-446655440000"
          id: "550e8400-e29b-41d4-a716-446655440003"
        # Use one of the existing specs
        spec: !file ./specs/users-api.yaml

    # Nested publications
    publications:
      - ref: comprehensive-public
        portal_id: demo-portal
        visibility: public
        auto_approve_registrations: true

# Define portal using file loading
portals:
  - ref: demo-portal
    name: "demo-portal"
    display_name: "Demo Developer Portal"
    description: "Portal demonstrating file loading capabilities"
    authentication_enabled: true
    auto_approve_developers: true
    labels:
      purpose: demo
      environment: development

# Separate API child resources using file extraction
api_versions:
  - ref: external-users-version
    api: users-api
    name: !file ./specs/users-api.yaml#info.version
    gateway_service:
      control_plane_id: "550e8400-e29b-41d4-a716-446655440000"
      id: "550e8400-e29b-41d4-a716-446655440004"
    spec: !file ./specs/users-api.yaml

api_publications:
  - ref: products-api-publication
    api: products-api
    portal_id: demo-portal
    visibility: public
    auto_approve_registrations: true

api_documents:
  - ref: users-api-guide
    api: users-api
    title: !file ./specs/users-api.yaml#info.title
    # Load documentation from external markdown file
    content: !file ./docs/user-api-guide.md

# Create the companion files that would be loaded:
# 
# ./descriptions/comprehensive-api.txt:
# "This API demonstrates comprehensive file loading capabilities including
# extraction from OpenAPI specs, plain text loading, and mixed approaches."
#
# ./docs/user-api-guide.md:
# "# User API Guide
# 
# This guide explains how to use the User Management API..."

# YAML Tag Syntax Summary (all implemented and working):
#
# 1. Simple file loading:
#    !file ./path/to/file.txt
#    - Loads entire file content as string
#    - Works with any text file (TXT, MD, YAML, JSON, etc.)
#
# 2. Hash syntax for extraction:
#    !file ./path/to/file.yaml#key.nested.path
#    - Loads file, parses as YAML/JSON, extracts value
#    - Supports array access: array.0, array.1, etc.
#    - Supports complex nested paths: info.contact.email
#
# 3. Map format for extraction:
#    !file
#      path: ./path/to/file.yaml
#      extract: key.nested.path
#    - Same functionality as hash syntax
#    - More verbose but clearer for complex extractions
#
# Security features (implemented):
# - Path traversal prevention (no ../ allowed)
# - File size limits (10MB maximum)
# - Relative path resolution from config file location
# - File caching during execution
# - Clean error messages for invalid paths/extractions
#
# Performance features:
# - Files are cached during single execution
# - Thread-safe file resolution
# - Efficient parsing for multiple extractions from same file