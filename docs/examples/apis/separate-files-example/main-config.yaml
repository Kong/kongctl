# Main Configuration - Platform Team Ownership
# This file demonstrates how different teams can manage their own resource files
# while maintaining a centralized main configuration

# Platform team manages portals and core infrastructure
portals:
  - ref: main-portal
    name: "main-portal"
    display_name: "Developer Documentation Portal"
    description: "Central portal for all API documentation"
    authentication_enabled: true
    auto_approve_developers: true
    labels:
      team: platform
      environment: production

# Load APIs from team-specific files using file tags
apis:
  # Load identity team's API configuration
  - !file ./teams/identity/user-api.yaml
  
  # Load e-commerce team's API configuration  
  - !file ./teams/ecommerce/products-api.yaml
  
  # Load payments team's API configuration
  - !file ./teams/payments/billing-api.yaml

# Platform team manages cross-cutting publications
api_publications:
  - ref: users-api-main-portal
    api: users-api  # Reference to API defined in teams/identity/user-api.yaml
    portal_id: main-portal
    visibility: public
    auto_approve_registrations: false

  - ref: products-api-main-portal
    api: products-api  # Reference to API defined in teams/ecommerce/products-api.yaml
    portal_id: main-portal
    visibility: public
    auto_approve_registrations: true

  - ref: billing-api-main-portal
    api: billing-api  # Reference to API defined in teams/payments/billing-api.yaml
    portal_id: main-portal
    visibility: private
    auto_approve_registrations: false

# This approach allows:
# 1. Teams to own their API definitions independently
# 2. Platform team to control portal and publication policies
# 3. Centralized configuration management
# 4. Clear separation of concerns
# 5. Version control at team level
# 6. Independent deployment cycles per team