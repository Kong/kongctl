openapi: 3.0.0
info:
  title: Product Catalog API
  version: 2.1.0
  description: RESTful API for managing product catalog
  contact:
    name: E-Commerce Team
    email: ecommerce@example.com
servers:
  - url: https://api.example.com/v2
    description: Production server
paths:
  /products:
    get:
      summary: List all products
      operationId: listProducts
      tags:
        - Products
      parameters:
        - name: category
          in: query
          description: Filter by category
          schema:
            type: string
        - name: minPrice
          in: query
          description: Minimum price filter
          schema:
            type: number
            format: float
        - name: maxPrice
          in: query
          description: Maximum price filter
          schema:
            type: number
            format: float
        - name: inStock
          in: query
          description: Filter by stock availability
          schema:
            type: boolean
        - name: limit
          in: query
          description: Maximum number of products to return
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: offset
          in: query
          description: Number of products to skip
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
    post:
      summary: Create a new product
      operationId: createProduct
      tags:
        - Products
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{productId}:
    get:
      summary: Get a product by ID
      operationId: getProduct
      tags:
        - Products
      parameters:
        - name: productId
          in: path
          required: true
          description: The product ID
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a product
      operationId: updateProduct
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          description: The product ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a product
      operationId: deleteProduct
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          description: The product ID
          schema:
            type: string
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{productId}/inventory:
    get:
      summary: Get product inventory
      operationId: getProductInventory
      tags:
        - Inventory
      parameters:
        - name: productId
          in: path
          required: true
          description: The product ID
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
    patch:
      summary: Update product inventory
      operationId: updateProductInventory
      tags:
        - Inventory
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          description: The product ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInventoryRequest'
      responses:
        '200':
          description: Inventory updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
components:
  schemas:
    Product:
      type: object
      required:
        - id
        - name
        - price
        - createdAt
      properties:
        id:
          type: string
          description: Unique identifier for the product
        name:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        price:
          type: number
          format: float
          description: Product price
        category:
          type: string
          description: Product category
        tags:
          type: array
          items:
            type: string
          description: Product tags for search
        images:
          type: array
          items:
            type: string
            format: uri
          description: Product image URLs
        inStock:
          type: boolean
          description: Whether the product is in stock
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the product was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the product was last updated
    CreateProductRequest:
      type: object
      required:
        - name
        - price
      properties:
        name:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        price:
          type: number
          format: float
          description: Product price
        category:
          type: string
          description: Product category
        tags:
          type: array
          items:
            type: string
          description: Product tags for search
        images:
          type: array
          items:
            type: string
            format: uri
          description: Product image URLs
    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        price:
          type: number
          format: float
          description: Product price
        category:
          type: string
          description: Product category
        tags:
          type: array
          items:
            type: string
          description: Product tags for search
        images:
          type: array
          items:
            type: string
            format: uri
          description: Product image URLs
    Inventory:
      type: object
      required:
        - productId
        - quantity
        - reserved
        - available
      properties:
        productId:
          type: string
          description: Product ID
        quantity:
          type: integer
          description: Total quantity in stock
        reserved:
          type: integer
          description: Quantity reserved for pending orders
        available:
          type: integer
          description: Quantity available for purchase
        lastRestocked:
          type: string
          format: date-time
          description: Last restock timestamp
    UpdateInventoryRequest:
      type: object
      properties:
        quantity:
          type: integer
          description: New total quantity
        adjustment:
          type: integer
          description: Quantity adjustment (positive or negative)
        reason:
          type: string
          description: Reason for inventory update
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          description: Additional error details
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: X-API-Key
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - apiKey: []