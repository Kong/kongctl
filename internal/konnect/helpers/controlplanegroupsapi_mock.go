// Code generated by hand for testing; mirrors mockery behaviour for ControlPlaneGroupsAPI.

package helpers

import (
	"context"

	kkComps "github.com/Kong/sdk-konnect-go/models/components"
	kkOps "github.com/Kong/sdk-konnect-go/models/operations"
	"github.com/stretchr/testify/mock"
)

// MockControlPlaneGroupsAPI is a testify-based mock for ControlPlaneGroupsAPI.
type MockControlPlaneGroupsAPI struct {
	mock.Mock
}

// EXPECT provides access to the mock's expectation helper.
func (m *MockControlPlaneGroupsAPI) EXPECT() *mock.Mock {
	return &m.Mock
}

// GetControlPlanesIDGroupMemberships mocks the corresponding API call.
func (m *MockControlPlaneGroupsAPI) GetControlPlanesIDGroupMemberships(
	ctx context.Context,
	request kkOps.GetControlPlanesIDGroupMembershipsRequest,
	opts ...kkOps.Option,
) (*kkOps.GetControlPlanesIDGroupMembershipsResponse, error) {
	args := []any{ctx, request}
	for _, opt := range opts {
		args = append(args, opt)
	}

	ret := m.Called(args...)
	var resp *kkOps.GetControlPlanesIDGroupMembershipsResponse
	if len(ret) > 0 && ret.Get(0) != nil {
		resp = ret.Get(0).(*kkOps.GetControlPlanesIDGroupMembershipsResponse)
	}

	var err error
	if len(ret) > 1 {
		if e, ok := ret.Get(1).(error); ok {
			err = e
		}
	}

	return resp, err
}

// PutControlPlanesIDGroupMemberships mocks the upsert API call.
func (m *MockControlPlaneGroupsAPI) PutControlPlanesIDGroupMemberships(
	ctx context.Context,
	id string,
	groupMembership *kkComps.GroupMembership,
	opts ...kkOps.Option,
) (*kkOps.PutControlPlanesIDGroupMembershipsResponse, error) {
	args := []any{ctx, id, groupMembership}
	for _, opt := range opts {
		args = append(args, opt)
	}

	ret := m.Called(args...)

	var resp *kkOps.PutControlPlanesIDGroupMembershipsResponse
	if len(ret) > 0 && ret.Get(0) != nil {
		resp = ret.Get(0).(*kkOps.PutControlPlanesIDGroupMembershipsResponse)
	}

	var err error
	if len(ret) > 1 {
		if e, ok := ret.Get(1).(error); ok {
			err = e
		}
	}

	return resp, err
}
